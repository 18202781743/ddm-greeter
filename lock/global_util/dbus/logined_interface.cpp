/*
 * This file was generated by qdbusxml2cpp-fix version 0.8
 * Command line was: qdbusxml2cpp-fix -c Logined -p /home/repo/dde-session-shell/src/global_util/dbus/logined_interface /home/repo/dde-session-shell/xml/org.deepin.dde.Logined.xml
 *
 * qdbusxml2cpp-fix is Copyright (C) 2016 Deepin Technology Co., Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#include "/home/repo/dde-session-shell/src/global_util/dbus/logined_interface.h"

DCORE_USE_NAMESPACE
/*
 * Implementation of interface class __Logined
 */

class __LoginedPrivate
{
public:
   __LoginedPrivate() = default;

    // begin member variables
    uint LastLogoutUser;
    QString UserList;

public:
    QMap<QString, QDBusPendingCallWatcher *> m_processingCalls;
    QMap<QString, QList<QVariant>> m_waittingCalls;
};

__Logined::__Logined(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent)
    : DDBusExtendedAbstractInterface(service, path, staticInterfaceName(), connection, parent)
    , d_ptr(new __LoginedPrivate)
{
    connect(this, &__Logined::propertyChanged, this, &__Logined::onPropertyChanged);

}

__Logined::~__Logined()
{
    qDeleteAll(d_ptr->m_processingCalls.values());
    delete d_ptr;
}

void __Logined::onPropertyChanged(const QString &propName, const QVariant &value)
{
    if (propName == QStringLiteral("LastLogoutUser"))
    {
        const uint &LastLogoutUser = qvariant_cast<uint>(value);
        if (d_ptr->LastLogoutUser != LastLogoutUser)
        {
            d_ptr->LastLogoutUser = LastLogoutUser;
            Q_EMIT LastLogoutUserChanged(d_ptr->LastLogoutUser);
        }
        return;
    }

    if (propName == QStringLiteral("UserList"))
    {
        const QString &UserList = qvariant_cast<QString>(value);
        if (d_ptr->UserList != UserList)
        {
            d_ptr->UserList = UserList;
            Q_EMIT UserListChanged(d_ptr->UserList);
        }
        return;
    }

    qWarning() << "property not handle: " << propName;
    return;
}

uint __Logined::lastLogoutUser()
{
    return qvariant_cast<uint>(internalPropGet("LastLogoutUser", &d_ptr->LastLogoutUser));
}

QString __Logined::userList()
{
    return qvariant_cast<QString>(internalPropGet("UserList", &d_ptr->UserList));
}

void __Logined::CallQueued(const QString &callName, const QList<QVariant> &args)
{
    if (d_ptr->m_waittingCalls.contains(callName))
    {
        d_ptr->m_waittingCalls[callName] = args;
        return;
    }
    if (d_ptr->m_processingCalls.contains(callName))
    {
        d_ptr->m_waittingCalls.insert(callName, args);
    } else {
        QDBusPendingCallWatcher *watcher = new QDBusPendingCallWatcher(asyncCallWithArgumentList(callName, args));
        connect(watcher, &QDBusPendingCallWatcher::finished, this, &__Logined::onPendingCallFinished);
        d_ptr->m_processingCalls.insert(callName, watcher);
    }
}

void __Logined::onPendingCallFinished(QDBusPendingCallWatcher *w)
{
    w->deleteLater();
    const auto callName = d_ptr->m_processingCalls.key(w);
    Q_ASSERT(!callName.isEmpty());
    if (callName.isEmpty())
        return;
    d_ptr->m_processingCalls.remove(callName);
    if (!d_ptr->m_waittingCalls.contains(callName))
        return;
    const auto args = d_ptr->m_waittingCalls.take(callName);
    CallQueued(callName, args);
}
