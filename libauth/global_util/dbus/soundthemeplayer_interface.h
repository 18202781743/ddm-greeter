/*
 * This file was generated by qdbusxml2cpp-fix version 0.8
 * Command line was: qdbusxml2cpp-fix -c SoundThemePlayer -p /home/repo/dde-session-shell/src/global_util/dbus/soundthemeplayer_interface /home/repo/dde-session-shell/xml/org.deepin.dde.SoundThemePlayer1.xml
 *
 * qdbusxml2cpp-fix is Copyright (C) 2016 Deepin Technology Co., Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef SOUNDTHEMEPLAYER_INTERFACE_H
#define SOUNDTHEMEPLAYER_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

#include <DDBusExtendedAbstractInterface>
#include <QtDBus/QtDBus>

#include "types/qvariantmap.h"

/*
 * Proxy class for interface org.deepin.dde.SoundThemePlayer1
 */
class __SoundThemePlayerPrivate;
class __SoundThemePlayer : public DTK_CORE_NAMESPACE::DDBusExtendedAbstractInterface
{
    Q_OBJECT

public:
    static inline const char *staticInterfaceName()
    { return "org.deepin.dde.SoundThemePlayer1"; }

public:
    explicit __SoundThemePlayer(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~__SoundThemePlayer();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> EnableSound(const QString &name, bool enabled)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(enabled);
        return asyncCallWithArgumentList(QStringLiteral("EnableSound"), argumentList);
    }

    inline void EnableSoundQueued(const QString &name, bool enabled)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(enabled);

        CallQueued(QStringLiteral("EnableSound"), argumentList);
    }


    inline QDBusPendingReply<> EnableSoundDesktopLogin(bool enabled)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(enabled);
        return asyncCallWithArgumentList(QStringLiteral("EnableSoundDesktopLogin"), argumentList);
    }

    inline void EnableSoundDesktopLoginQueued(bool enabled)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(enabled);

        CallQueued(QStringLiteral("EnableSoundDesktopLogin"), argumentList);
    }


    inline QDBusPendingReply<> Play(const QString &theme, const QString &event, const QString &device)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(theme) << QVariant::fromValue(event) << QVariant::fromValue(device);
        return asyncCallWithArgumentList(QStringLiteral("Play"), argumentList);
    }

    inline void PlayQueued(const QString &theme, const QString &event, const QString &device)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(theme) << QVariant::fromValue(event) << QVariant::fromValue(device);

        CallQueued(QStringLiteral("Play"), argumentList);
    }


    inline QDBusPendingReply<> PlaySoundDesktopLogin()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("PlaySoundDesktopLogin"), argumentList);
    }

    inline void PlaySoundDesktopLoginQueued()
    {
        QList<QVariant> argumentList;

        CallQueued(QStringLiteral("PlaySoundDesktopLogin"), argumentList);
    }


    inline QDBusPendingReply<> PrepareShutdownSound(int uid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(uid);
        return asyncCallWithArgumentList(QStringLiteral("PrepareShutdownSound"), argumentList);
    }

    inline void PrepareShutdownSoundQueued(int uid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(uid);

        CallQueued(QStringLiteral("PrepareShutdownSound"), argumentList);
    }


    inline QDBusPendingReply<> SaveAudioState(const QVariantMap &avtivePlayback)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(avtivePlayback);
        return asyncCallWithArgumentList(QStringLiteral("SaveAudioState"), argumentList);
    }

    inline void SaveAudioStateQueued(const QVariantMap &avtivePlayback)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(avtivePlayback);

        CallQueued(QStringLiteral("SaveAudioState"), argumentList);
    }


    inline QDBusPendingReply<> SetSoundTheme(const QString &theme)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(theme);
        return asyncCallWithArgumentList(QStringLiteral("SetSoundTheme"), argumentList);
    }

    inline void SetSoundThemeQueued(const QString &theme)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(theme);

        CallQueued(QStringLiteral("SetSoundTheme"), argumentList);
    }



Q_SIGNALS: // SIGNALS
    // begin property changed signals

public Q_SLOTS:
    void CallQueued(const QString &callName, const QList<QVariant> &args);

private Q_SLOTS:
    void onPendingCallFinished(QDBusPendingCallWatcher *w);

private:
    __SoundThemePlayerPrivate *d_ptr;
};

namespace org {
  namespace deepin {
    namespace dde {
      typedef ::__SoundThemePlayer SoundThemePlayer1;
    }
  }
}
#endif
